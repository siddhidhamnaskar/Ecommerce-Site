generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  email     String   @unique
  password  String?
  cart      Cart?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String     @id @default(cuid()) @map("_id")
  name        String
  description String?
  price       Float
  image       String?
  categoryId  String?
  category    Category?  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Category {
  id       String    @id @default(cuid()) @map("_id")
  name     String    @unique
  products Product[]
}

model Cart {
  id        String     @id @default(cuid()) @map("_id")
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique // ensures one cart per user
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid()) @map("_id")
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String      @id @default(cuid()) @map("_id")
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  items         OrderItem[]
  total         Float
  status        OrderStatus @default(PENDING)
  paymentMethod String      // "card" or "cod"
  shippingInfo  Json        // Store shipping details as JSON
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid()) @map("_id")
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float   // Store price at time of order
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
